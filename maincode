import speech_recognition as sr
import pyperclip
import pyautogui
import time
import tkinter as tk
import threading
import queue

# ==== 한글 자모 정의 ====
HARD_SPLIT_MAP ={    '기역아': ['기역', '아'],
    '기역애': ['기역', '애'],
    '기역야': ['기역', '야'],
    '기역얘': ['기역', '얘'],
    '기역어': ['기역', '어'],
    '기역에': ['기역', '에'],
    '기역여': ['기역', '여'],
    '기역예': ['기역', '예'],
    '기역오': ['기역', '오'],
    '기역와': ['기역', '와'],
    '기역왜': ['기역', '왜'],
    '기역외': ['기역', '외'],
    '기역요': ['기역', '요'],
    '기역우': ['기역', '우'],
    '기역워': ['기역', '워'],
    '기역웨': ['기역', '웨'],
    '기역위': ['기역', '위'],
    '기역유': ['기역', '유'],
    '기역으': ['기역', '으'],
    '기역의': ['기역', '의'],
    '기역이': ['기역', '이'],
    '기역기역아': ['기역기역', '아'],
    '기역기역애': ['기역기역', '애'],
    '기역기역야': ['기역기역', '야'],
    '기역기역얘': ['기역기역', '얘'],
    '기역기역어': ['기역기역', '어'],
    '기역기역에': ['기역기역', '에'],
    '기역기역여': ['기역기역', '여'],
    '기역기역예': ['기역기역', '예'],
    '기역기역오': ['기역기역', '오'],
    '기역기역와': ['기역기역', '와'],
    '기역기역왜': ['기역기역', '왜'],
    '기역기역외': ['기역기역', '외'],
    '기역기역요': ['기역기역', '요'],
    '기역기역우': ['기역기역', '우'],
    '기역기역워': ['기역기역', '워'],
    '기역기역웨': ['기역기역', '웨'],
    '기역기역위': ['기역기역', '위'],
    '기역기역유': ['기역기역', '유'],
    '기역기역으': ['기역기역', '으'],
    '기역기역의': ['기역기역', '의'],
    '기역기역이': ['기역기역', '이'],
    '니은아': ['니은', '아'],
    '니은애': ['니은', '애'],
    '니은야': ['니은', '야'],
    '니은얘': ['니은', '얘'],
    '니은어': ['니은', '어'],
    '니은에': ['니은', '에'],
    '니은여': ['니은', '여'],
    '니은예': ['니은', '예'],
    '니은오': ['니은', '오'],
    '니은와': ['니은', '와'],
    '니은왜': ['니은', '왜'],
    '니은외': ['니은', '외'],
    '니은요': ['니은', '요'],
    '니은우': ['니은', '우'],
    '니은워': ['니은', '워'],
    '니은웨': ['니은', '웨'],
    '니은위': ['니은', '위'],
    '니은유': ['니은', '유'],
    '니은으': ['니은', '으'],
    '니은의': ['니은', '의'],
    '니은이': ['니은', '이'],
    '디귿아': ['디귿', '아'],
    '디귿애': ['디귿', '애'],
    '디귿야': ['디귿', '야'],
    '디귿얘': ['디귿', '얘'],
    '디귿어': ['디귿', '어'],
    '디귿에': ['디귿', '에'],
    '디귿여': ['디귿', '여'],
    '디귿예': ['디귿', '예'],
    '디귿오': ['디귿', '오'],
    '디귿와': ['디귿', '와'],
    '디귿왜': ['디귿', '왜'],
    '디귿외': ['디귿', '외'],
    '디귿요': ['디귿', '요'],
    '디귿우': ['디귿', '우'],
    '디귿워': ['디귿', '워'],
    '디귿웨': ['디귿', '웨'],
    '디귿위': ['디귿', '위'],
    '디귿유': ['디귿', '유'],
    '디귿으': ['디귿', '으'],
    '디귿의': ['디귿', '의'],
    '디귿이': ['디귿', '이'],
    '디귿디귿아': ['디귿디귿', '아'],
    '디귿디귿애': ['디귿디귿', '애'],
    '디귿디귿야': ['디귿디귿', '야'],
    '디귿디귿얘': ['디귿디귿', '얘'],
    '디귿디귿어': ['디귿디귿', '어'],
    '디귿디귿에': ['디귿디귿', '에'],
    '디귿디귿여': ['디귿디귿', '여'],
    '디귿디귿예': ['디귿디귿', '예'],
    '디귿디귿오': ['디귿디귿', '오'],
    '디귿디귿와': ['디귿디귿', '와'],
    '디귿디귿왜': ['디귿디귿', '왜'],
    '디귿디귿외': ['디귿디귿', '외'],
    '디귿디귿요': ['디귿디귿', '요'],
    '디귿디귿우': ['디귿디귿', '우'],
    '디귿디귿워': ['디귿디귿', '워'],
    '디귿디귿웨': ['디귿디귿', '웨'],
    '디귿디귿위': ['디귿디귿', '위'],
    '디귿디귿유': ['디귿디귿', '유'],
    '디귿디귿으': ['디귿디귿', '으'],
    '디귿디귿의': ['디귿디귿', '의'],
    '디귿디귿이': ['디귿디귿', '이'],
    '리을아': ['리을', '아'],
    '리을애': ['리을', '애'],
    '리을야': ['리을', '야'],
    '리을얘': ['리을', '얘'],
    '리을어': ['리을', '어'],
    '리을에': ['리을', '에'],
    '리을여': ['리을', '여'],
    '리을예': ['리을', '예'],
    '리을오': ['리을', '오'],
    '리을와': ['리을', '와'],
    '리을왜': ['리을', '왜'],
    '리을외': ['리을', '외'],
    '리을요': ['리을', '요'],
    '리을우': ['리을', '우'],
    '리을워': ['리을', '워'],
    '리을웨': ['리을', '웨'],
    '리을위': ['리을', '위'],
    '리을유': ['리을', '유'],
    '리을으': ['리을', '으'],
    '리을의': ['리을', '의'],
    '리을이': ['리을', '이'],
    '미음아': ['미음', '아'],
    '미음애': ['미음', '애'],
    '미음야': ['미음', '야'],
    '미음얘': ['미음', '얘'],
    '미음어': ['미음', '어'],
    '미음에': ['미음', '에'],
    '미음여': ['미음', '여'],
    '미음예': ['미음', '예'],
    '미음오': ['미음', '오'],
    '미음와': ['미음', '와'],
    '미음왜': ['미음', '왜'],
    '미음외': ['미음', '외'],
    '미음요': ['미음', '요'],
    '미음우': ['미음', '우'],
    '미음워': ['미음', '워'],
    '미음웨': ['미음', '웨'],
    '미음위': ['미음', '위'],
    '미음유': ['미음', '유'],
    '미음으': ['미음', '으'],
    '미음의': ['미음', '의'],
    '미음이': ['미음', '이'],
    '비읍아': ['비읍', '아'],
    '비읍애': ['비읍', '애'],
    '비읍야': ['비읍', '야'],
    '비읍얘': ['비읍', '얘'],
    '비읍어': ['비읍', '어'],
    '비읍에': ['비읍', '에'],
    '비읍여': ['비읍', '여'],
    '비읍예': ['비읍', '예'],
    '비읍오': ['비읍', '오'],
    '비읍와': ['비읍', '와'],
    '비읍왜': ['비읍', '왜'],
    '비읍외': ['비읍', '외'],
    '비읍요': ['비읍', '요'],
    '비읍우': ['비읍', '우'],
    '비읍워': ['비읍', '워'],
    '비읍웨': ['비읍', '웨'],
    '비읍위': ['비읍', '위'],
    '비읍유': ['비읍', '유'],
    '비읍으': ['비읍', '으'],
    '비읍의': ['비읍', '의'],
    '비읍이': ['비읍', '이'],
    '비읍비읍아': ['비읍비읍', '아'],
    '비읍비읍애': ['비읍비읍', '애'],
    '비읍비읍야': ['비읍비읍', '야'],
    '비읍비읍얘': ['비읍비읍', '얘'],
    '비읍비읍어': ['비읍비읍', '어'],
    '비읍비읍에': ['비읍비읍', '에'],
    '비읍비읍여': ['비읍비읍', '여'],
    '비읍비읍예': ['비읍비읍', '예'],
    '비읍비읍오': ['비읍비읍', '오'],
    '비읍비읍와': ['비읍비읍', '와'],
    '비읍비읍왜': ['비읍비읍', '왜'],
    '비읍비읍외': ['비읍비읍', '외'],
    '비읍비읍요': ['비읍비읍', '요'],
    '비읍비읍우': ['비읍비읍', '우'],
    '비읍비읍워': ['비읍비읍', '워'],
    '비읍비읍웨': ['비읍비읍', '웨'],
    '비읍비읍위': ['비읍비읍', '위'],
    '비읍비읍유': ['비읍비읍', '유'],
    '비읍비읍으': ['비읍비읍', '으'],
    '비읍비읍의': ['비읍비읍', '의'],
    '비읍비읍이': ['비읍비읍', '이'],
    '시옷아': ['시옷', '아'],
    '시옷애': ['시옷', '애'],
    '시옷야': ['시옷', '야'],
    '시옷얘': ['시옷', '얘'],
    '시옷어': ['시옷', '어'],
    '시옷에': ['시옷', '에'],
    '시옷여': ['시옷', '여'],
    '시옷예': ['시옷', '예'],
    '시옷오': ['시옷', '오'],
    '시옷와': ['시옷', '와'],
    '시옷왜': ['시옷', '왜'],
    '시옷외': ['시옷', '외'],
    '시옷요': ['시옷', '요'],
    '시옷우': ['시옷', '우'],
    '시옷워': ['시옷', '워'],
    '시옷웨': ['시옷', '웨'],
    '시옷위': ['시옷', '위'],
    '시옷유': ['시옷', '유'],
    '시옷으': ['시옷', '으'],
    '시옷의': ['시옷', '의'],
    '시옷이': ['시옷', '이'],
    '시옷시옷아': ['시옷시옷', '아'],
    '시옷시옷애': ['시옷시옷', '애'],
    '시옷시옷야': ['시옷시옷', '야'],
    '시옷시옷얘': ['시옷시옷', '얘'],
    '시옷시옷어': ['시옷시옷', '어'],
    '시옷시옷에': ['시옷시옷', '에'],
    '시옷시옷여': ['시옷시옷', '여'],
    '시옷시옷예': ['시옷시옷', '예'],
    '시옷시옷오': ['시옷시옷', '오'],
    '시옷시옷와': ['시옷시옷', '와'],
    '시옷시옷왜': ['시옷시옷', '왜'],
    '시옷시옷외': ['시옷시옷', '외'],
    '시옷시옷요': ['시옷시옷', '요'],
    '시옷시옷우': ['시옷시옷', '우'],
    '시옷시옷워': ['시옷시옷', '워'],
    '시옷시옷웨': ['시옷시옷', '웨'],
    '시옷시옷위': ['시옷시옷', '위'],
    '시옷시옷유': ['시옷시옷', '유'],
    '시옷시옷으': ['시옷시옷', '으'],
    '시옷시옷의': ['시옷시옷', '의'],
    '시옷시옷이': ['시옷시옷', '이'],
    '이응아': ['이응', '아'],
    '이응애': ['이응', '애'],
    '이응야': ['이응', '야'],
    '이응얘': ['이응', '얘'],
    '이응어': ['이응', '어'],
    '이응에': ['이응', '에'],
    '이응여': ['이응', '여'],
    '이응예': ['이응', '예'],
    '이응오': ['이응', '오'],
    '이응와': ['이응', '와'],
    '이응왜': ['이응', '왜'],
    '이응외': ['이응', '외'],
    '이응요': ['이응', '요'],
    '이응우': ['이응', '우'],
    '이응워': ['이응', '워'],
    '이응웨': ['이응', '웨'],
    '이응위': ['이응', '위'],
    '이응유': ['이응', '유'],
    '이응으': ['이응', '으'],
    '이응의': ['이응', '의'],
    '이응이': ['이응', '이'],
    '지읒아': ['지읒', '아'],
    '지읒애': ['지읒', '애'],
    '지읒야': ['지읒', '야'],
    '지읒얘': ['지읒', '얘'],
    '지읒어': ['지읒', '어'],
    '지읒에': ['지읒', '에'],
    '지읒여': ['지읒', '여'],
    '지읒예': ['지읒', '예'],
    '지읒오': ['지읒', '오'],
    '지읒와': ['지읒', '와'],
    '지읒왜': ['지읒', '왜'],
    '지읒외': ['지읒', '외'],
    '지읒요': ['지읒', '요'],
    '지읒우': ['지읒', '우'],
    '지읒워': ['지읒', '워'],
    '지읒웨': ['지읒', '웨'],
    '지읒위': ['지읒', '위'],
    '지읒유': ['지읒', '유'],
    '지읒으': ['지읒', '으'],
    '지읒의': ['지읒', '의'],
    '지읒이': ['지읒', '이'],
    '지읒지읒아': ['지읒지읒', '아'],
    '지읒지읒애': ['지읒지읒', '애'],
    '지읒지읒야': ['지읒지읒', '야'],
    '지읒지읒얘': ['지읒지읒', '얘'],
    '지읒지읒어': ['지읒지읒', '어'],
    '지읒지읒에': ['지읒지읒', '에'],
    '지읒지읒여': ['지읒지읒', '여'],
    '지읒지읒예': ['지읒지읒', '예'],
    '지읒지읒오': ['지읒지읒', '오'],
    '지읒지읒와': ['지읒지읒', '와'],
    '지읒지읒왜': ['지읒지읒', '왜'],
    '지읒지읒외': ['지읒지읒', '외'],
    '지읒지읒요': ['지읒지읒', '요'],
    '지읒지읒우': ['지읒지읒', '우'],
    '지읒지읒워': ['지읒지읒', '워'],
    '지읒지읒웨': ['지읒지읒', '웨'],
    '지읒지읒위': ['지읒지읒', '위'],
    '지읒지읒유': ['지읒지읒', '유'],
    '지읒지읒으': ['지읒지읒', '으'],
    '지읒지읒의': ['지읒지읒', '의'],
    '지읒지읒이': ['지읒지읒', '이'],
    '치읓아': ['치읓', '아'],
    '치읓애': ['치읓', '애'],
    '치읓야': ['치읓', '야'],
    '치읓얘': ['치읓', '얘'],
    '치읓어': ['치읓', '어'],
    '치읓에': ['치읓', '에'],
    '치읓여': ['치읓', '여'],
    '치읓예': ['치읓', '예'],
    '치읓오': ['치읓', '오'],
    '치읓와': ['치읓', '와'],
    '치읓왜': ['치읓', '왜'],
    '치읓외': ['치읓', '외'],
    '치읓요': ['치읓', '요'],
    '치읓우': ['치읓', '우'],
    '치읓워': ['치읓', '워'],
    '치읓웨': ['치읓', '웨'],
    '치읓위': ['치읓', '위'],
    '치읓유': ['치읓', '유'],
    '치읓으': ['치읓', '으'],
    '치읓의': ['치읓', '의'],
    '치읓이': ['치읓', '이'],
    '키읔아': ['키읔', '아'],
    '키읔애': ['키읔', '애'],
    '키읔야': ['키읔', '야'],
    '키읔얘': ['키읔', '얘'],
    '키읔어': ['키읔', '어'],
    '키읔에': ['키읔', '에'],
    '키읔여': ['키읔', '여'],
    '키읔예': ['키읔', '예'],
    '키읔오': ['키읔', '오'],
    '키읔와': ['키읔', '와'],
    '키읔왜': ['키읔', '왜'],
    '키읔외': ['키읔', '외'],
    '키읔요': ['키읔', '요'],
    '키읔우': ['키읔', '우'],
    '키읔워': ['키읔', '워'],
    '키읔웨': ['키읔', '웨'],
    '키읔위': ['키읔', '위'],
    '키읔유': ['키읔', '유'],
    '키읔으': ['키읔', '으'],
    '키읔의': ['키읔', '의'],
    '키읔이': ['키읔', '이'],
    '티읕아': ['티읕', '아'],
    '티읕애': ['티읕', '애'],
    '티읕야': ['티읕', '야'],
    '티읕얘': ['티읕', '얘'],
    '티읕어': ['티읕', '어'],
    '티읕에': ['티읕', '에'],
    '티읕여': ['티읕', '여'],
    '티읕예': ['티읕', '예'],
    '티읕오': ['티읕', '오'],
    '티읕와': ['티읕', '와'],
    '티읕왜': ['티읕', '왜'],
    '티읕외': ['티읕', '외'],
    '티읕요': ['티읕', '요'],
    '티읕우': ['티읕', '우'],
    '티읕워': ['티읕', '워'],
    '티읕웨': ['티읕', '웨'],
    '티읕위': ['티읕', '위'],
    '티읕유': ['티읕', '유'],
    '티읕으': ['티읕', '으'],
    '티읕의': ['티읕', '의'],
    '티읕이': ['티읕', '이'],
    '피읖아': ['피읖', '아'],
    '피읖애': ['피읖', '애'],
    '피읖야': ['피읖', '야'],
    '피읖얘': ['피읖', '얘'],
    '피읖어': ['피읖', '어'],
    '피읖에': ['피읖', '에'],
    '피읖여': ['피읖', '여'],
    '피읖예': ['피읖', '예'],
    '피읖오': ['피읖', '오'],
    '피읖와': ['피읖', '와'],
    '피읖왜': ['피읖', '왜'],
    '피읖외': ['피읖', '외'],
    '피읖요': ['피읖', '요'],
    '피읖우': ['피읖', '우'],
    '피읖워': ['피읖', '워'],
    '피읖웨': ['피읖', '웨'],
    '피읖위': ['피읖', '위'],
    '피읖유': ['피읖', '유'],
    '피읖으': ['피읖', '으'],
    '피읖의': ['피읖', '의'],
    '피읖이': ['피읖', '이'],
    '히읗아': ['히읗', '아'],
    '히읗애': ['히읗', '애'],
    '히읗야': ['히읗', '야'],
    '히읗얘': ['히읗', '얘'],
    '히읗어': ['히읗', '어'],
    '히읗에': ['히읗', '에'],
    '히읗여': ['히읗', '여'],
    '히읗예': ['히읗', '예'],
    '히읗오': ['히읗', '오'],
    '히읗와': ['히읗', '와'],
    '히읗왜': ['히읗', '왜'],
    '히읗외': ['히읗', '외'],
    '히읗요': ['히읗', '요'],
    '히읗우': ['히읗', '우'],
    '히읗워': ['히읗', '워'],
    '히읗웨': ['히읗', '웨'],
    '히읗위': ['히읗', '위'],
    '히읗유': ['히읗', '유'],
    '히읗으': ['히읗', '으'],
    '히읗의': ['히읗', '의'],
    '히읗이': ['히읗', '이'],

    }


MISRECOGNIZED_FIX_MAP = {
    '기억': '기역',
    '지금': '디귿',
    '2':'이'
}
DOUBLE_CHO_MAP = {
    'ㄱㄱ': 'ㄲ',
    'ㄷㄷ': 'ㄸ',
    'ㅂㅂ': 'ㅃ',
    'ㅅㅅ': 'ㅆ',
    'ㅈㅈ': 'ㅉ'
}
CHO = ['ㄱ','ㄲ','ㄴ','ㄷ','ㄸ','ㄹ','ㅁ','ㅂ','ㅃ','ㅅ','ㅆ','ㅇ','ㅈ','ㅉ','ㅊ','ㅋ','ㅌ','ㅍ','ㅎ']
CHO_NAME = ['기역','기역기역','니은','디귿','디귿디귿','리을','미음','비읍','비읍비읍','시옷','시옷시옷','이응','지읒','지읒지읒','치읓','키읔','티읕','피읖','히읗']
JUNG = ['ㅏ','ㅐ','ㅑ','ㅒ','ㅓ','ㅔ','ㅕ','ㅖ','ㅗ','ㅘ','ㅙ','ㅚ','ㅛ','ㅜ','ㅝ','ㅞ','ㅟ','ㅠ','ㅡ','ㅢ','ㅣ']
JUNG_NAME = ['아','애','야','얘','어','에','여','예','오','와','왜','외','요','우','워','웨','위','유','으','의','이']
JONG = ['', 'ㄱ','ㄲ','ㄳ','ㄴ','ㄵ','ㄶ','ㄷ','ㄹ','ㄺ','ㄻ','ㄼ','ㄽ','ㄾ','ㄿ','ㅀ','ㅁ','ㅂ','ㅄ','ㅅ','ㅆ','ㅇ','ㅈ','ㅊ','ㅋ','ㅌ','ㅍ','ㅎ']
JONG_NAME = ['','기역','기역기역','기역시옷','니은','니은지읒','니은히읗','디귿','리을','리을기역','리을미음','리을비읍','리을시옷','리을티읕','리을피읖','리을히읗','미음','비읍','비읍시옷','시옷','시옷시옷','이응','지읒','치읓','키읔','티읕','피읖','히읗']
JUNG_COMBINE = {
    ('오', '아'): 'ㅘ',  ('오', '아','이'): 'ㅙ', ('오', '이'): 'ㅚ',
    ('우', '어'): 'ㅝ', ('우', '어','이'): 'ㅞ', ('우', '이'): 'ㅟ',
    ('ㅡ', '이'): 'ㅢ',('아','이'):'ㅐ',('어','이'):'ㅔ',
    ('ㅗ','ㅏ'):'ㅘ', ('ㅗ','ㅏ','ㅣ'):'ㅙ', ('ㅗ','ㅣ'):'ㅚ',
    ('ㅜ','ㅓ'):'ㅝ', ('ㅜ','ㅓ','ㅣ'):'ㅞ', ('ㅜ','ㅣ'):'ㅟ',
    ('ㅡ','ㅣ'):'ㅢ' , ('ㅏ','ㅣ'): 'ㅐ', ('ㅓ','ㅣ'):'ㅔ', ('ㅕ','ㅣ'):'ㅖ', ('ㅑ','ㅣ'):'ㅒ'
}
JUNG_AUTO_SPLIT = {
    '어이': ('어', '이'), '우이': ('우', '이'), '오이': ('오', '이'),
    '오아': ('오', '아'), '오애': ('오', '애'), '우어': ('우', '어'), '우에': ('우', '에'),
    '오아이': ('오', '아', '이'), '우어이': ('우', '어', '이'),'아이':('아','이')
}
ALL_JAMO_NAMES = CHO_NAME + JUNG_NAME + JONG_NAME
ALL_JAMO_NAMES = sorted(ALL_JAMO_NAMES, key=lambda x: -len(x))

def is_all_jung_name(word):
    return all(char in JUNG_NAME for char in word)

def split_hangul_syllable(ch):
    code = ord(ch)
    if not (0xAC00 <= code <= 0xD7A3):
        return []
    code -= 0xAC00
    cho_idx = code // (21 * 28)
    jung_idx = (code % (21 * 28)) // 28
    jong_idx = code % 28
    names = []
    if cho_idx < len(CHO_NAME):
        names.append(CHO_NAME[cho_idx])
    if jung_idx < len(JUNG_NAME):
        names.append(JUNG_NAME[jung_idx])
    if jong_idx > 0 and jong_idx < len(JONG_NAME):
        names.append(JONG_NAME[jong_idx])
    return names

def tokenize_jamo_names(text):
    tokens = []
    i = 0
    while i < len(text):
        matched = False
        for name in ALL_JAMO_NAMES:
            if text[i:i+len(name)] == name:
                tokens.append(name)
                i += len(name)
                matched = True
                break
        if not matched:
            syllable_tokens = split_hangul_syllable(text[i])
            if syllable_tokens:
                tokens.extend(syllable_tokens)
            elif text[i] in JUNG_NAME:
                tokens.append(text[i])
            i += 1
    return tokens

def preprocess_input_jamo_names(jamo_names):
    result = []
    for name in jamo_names:
        if name in HARD_SPLIT_MAP:
            result.extend(HARD_SPLIT_MAP[name])
        else:
            tokens = tokenize_jamo_names(name)
            if tokens:
                result.extend(tokens)
            else:
                result.append(name)  # <- 이 줄 없으면 매핑 실패 시 누락됨
    return result

def compose_hangul(cho, jung, jong):
    if cho not in CHO or jung not in JUNG or (jong and jong not in JONG):
        res = ''
        res += cho if cho else ''
        res += jung if jung else ''
        res += jong if jong else ''
        return res
    cho_idx = CHO.index(cho)
    jung_idx = JUNG.index(jung)
    jong_idx = JONG.index(jong) if jong else 0
    code = 0xAC00 + (cho_idx * 21 * 28) + (jung_idx * 28) + jong_idx
    return chr(code)

def recognize_voice():
    r = sr.Recognizer()
    r.energy_threshold = 250              # 소리 감지 민감도 (낮게 유지)
    r.pause_threshold = 0.3               # 말 사이 짧은 정적 허용
    r.non_speaking_duration = 0.2         # 말 끝났다고 판단하는 시간 (짧게)
    r.dynamic_energy_threshold = False    # 자동 민감도 꺼둠 (일관성 있게)

    with sr.Microphone() as source:
        try:
            audio = r.listen(source)      # 제한시간 없이 계속 듣는다
            text = r.recognize_google(audio, language='ko-KR')
            ui_print("인식 결과: " + text)
            return text.strip()
        except Exception:
            return ""


def preprocess_jamo_names(jamo_names):
    new_list = []
    for name in jamo_names:
        if name in JUNG_AUTO_SPLIT:
            new_list.extend(JUNG_AUTO_SPLIT[name])
        else:
            new_list.append(name)
    return new_list

def jamo_names_to_jamos(jamo_names):
    result = []
    for name in jamo_names:
        if name in CHO_NAME:
            result.append(CHO[CHO_NAME.index(name)])
        elif name in JUNG_NAME:
            result.append(JUNG[JUNG_NAME.index(name)])
        elif name in JONG_NAME:
            result.append(JONG[JONG_NAME.index(name)])
        else:
            result.append(name)
    return result

def jamo_to_hangul_with_raw(jamos):
    result = ""
    i = 0
    n = len(jamos)
    while i < n:
        cho = None
        cj = 1
        if i+1 < n and (jamos[i] + jamos[i+1]) in DOUBLE_CHO_MAP:
            cho = DOUBLE_CHO_MAP[jamos[i] + jamos[i+1]]
            cj = 2
        elif i+1 < n and (jamos[i] + jamos[i+1]) in CHO:
            cho = jamos[i] + jamos[i+1]
            cj = 2
        elif jamos[i] in CHO:
            cho = jamos[i]
        else:
            combined = None
            consumed = 0
            if i+2 < n and (jamos[i], jamos[i+1], jamos[i+2]) in JUNG_COMBINE:
                combined = JUNG_COMBINE[(jamos[i], jamos[i+1], jamos[i+2])]
                consumed = 3
            elif i+1 < n and (jamos[i], jamos[i+1]) in JUNG_COMBINE:
                combined = JUNG_COMBINE[(jamos[i], jamos[i+1])]
                consumed = 2
            elif jamos[i] in JUNG:
                combined = jamos[i]
                consumed = 1
            if combined:
                result += combined
                i += consumed
                continue
            else:
                result += jamos[i]
                i += 1
                continue

        jung = None
        jj = 0
        if i+cj+2 < n:
            triplet = (jamos[i+cj], jamos[i+cj+1], jamos[i+cj+2])
            if triplet in JUNG_COMBINE:
                jung_str = JUNG_COMBINE[triplet]
                if jung_str in JUNG:
                    jung = jung_str
                    jj = 3
        if jung is None and i+cj+1 < n:
            pair = (jamos[i+cj], jamos[i+cj+1])
            if pair in JUNG_COMBINE:
                jung_str = JUNG_COMBINE[pair]
                if jung_str in JUNG:
                    jung = jung_str
                    jj = 2
        if jung is None and i+cj < n:
            if jamos[i+cj] in JUNG:
                jung = jamos[i+cj]
                jj = 1
        if jung is None:
            result += jamos[i]
            i += 1
            continue

        jong = ''
        jk = 0
        if i+cj+jj < n-1 and jamos[i+cj+jj+1] in JUNG:
            pass
        else:
            if i+cj+jj+1 < n:
                pair = jamos[i+cj+jj], jamos[i+cj+jj+1]
                pair_str = pair[0]+pair[1]
                if pair_str in JONG:
                    jong = pair_str
                    jk = 2
            if not jong and i+cj+jj < n:
                if jamos[i+cj+jj] in JONG:
                    jong = jamos[i+cj+jj]
                    jk = 1

        try:
            if (cho in CHO) and (jung in JUNG) and (jong in JONG or jong == ''):
                result += compose_hangul(cho, jung, jong)
            else:
                for off in range(cj + jj + jk):
                    if i + off < n:
                        result += jamos[i + off]
        except Exception:
            for off in range(cj + jj + jk):
                if i + off < n:
                    result += jamos[i + off]
        move = cj + jj + (jk if jong else 0)
        if move <= 0:
            move = 1
        i += move
    return result

AUTO_SPLIT_KEYS = set(JUNG_AUTO_SPLIT.keys())

# ==== UI 코드 ====
msg_queue = queue.Queue()
def ui_print(text):
    msg_queue.put(text)

def recognize_and_type():
    a = 0
    while True:
        a += 1
        while True:
            if a == 1:
                ui_print("음성 대기 중... '엔터'라고 말하면 입력을 시작합니다!")
            cmd = recognize_voice()
            if cmd.lower() in ["엔터", "enter"]:
                break

        ui_print("입력모드 진입!(끝내려면 '엔터'를 다시 말하세요.)")
        ui_print("※ '지우기' 또는 '삭제'로 마지막 입력 삭제, '초기화' 또는 '클리어'로 전체 삭제할 수 있습니다.")
        jamo_names = []

        while True:
            v = recognize_voice()
            if not v.strip():
                continue
            parts = v.replace(',', ' ').split()
            if any(word.lower() in ["엔터", "enter"] for word in parts):
                break
            for word in parts:
                word = word.strip()
                word = MISRECOGNIZED_FIX_MAP.get(word, word)

                # ✅ HARD_SPLIT_MAP 우선 적용
                if word in HARD_SPLIT_MAP:
                    jamo_names.extend(HARD_SPLIT_MAP[word])
                    
                    continue

                if word in ["지우기", "삭제"]:
                    if jamo_names:
                        popped = jamo_names.pop()
                        ui_print(f"'{popped}' 삭제됨 → 현재: {jamo_names}")
                    else:
                        ui_print("삭제할 항목이 없습니다.")
                elif word in ["초기화", "클리어"]:
                    jamo_names.clear()
                    ui_print("입력이 전체 초기화되었습니다.")
                elif word in CHO_NAME or word in JUNG_NAME or word in JONG_NAME or word in AUTO_SPLIT_KEYS:
                    jamo_names.append(word)
                elif is_all_jung_name(word):
                    jamo_names.extend(list(word))

        jamo_names = preprocess_jamo_names(jamo_names)
        ui_print("입력된 리스트: " + str(jamo_names))
        jamos = jamo_names_to_jamos(jamo_names)
        result = jamo_to_hangul_with_raw(jamos) if len(jamos) > 1 else (jamos[0] if jamos else "")
        ui_print("최종 결과: " + result)
        if result:
            pyperclip.copy(result)
            time.sleep(0.2)
            pyautogui.hotkey('ctrl', 'v')
        ui_print("입력 완료. 다시 '엔터'라고 말하면 또 시작할 수 있습니다.")
        
def gui_main():
    root = tk.Tk()
    root.title("음성 자모 입력 프로그램")
    root.geometry("650x430")

    text_box = tk.Text(root, font=("Consolas", 13))
    text_box.pack(fill=tk.BOTH, expand=True)

    def poll_queue():
        while not msg_queue.empty():
            msg = msg_queue.get_nowait()
            text_box.insert(tk.END, msg + "\n")
            text_box.see(tk.END)
        root.after(100, poll_queue)

    root.after(100, poll_queue)
    threading.Thread(target=recognize_and_type, daemon=True).start()
    root.mainloop()

if __name__ == "__main__":
    gui_main()
